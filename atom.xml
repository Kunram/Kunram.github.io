<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sakii&#39;s Blog</title>
  
  
  <link href="http://kunram.github.io/atom.xml" rel="self"/>
  
  <link href="http://kunram.github.io/"/>
  <updated>2022-07-13T18:27:17.316Z</updated>
  <id>http://kunram.github.io/</id>
  
  <author>
    <name>Sakii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GoogleCTF2022-Cycling</title>
    <link href="http://kunram.github.io/2022/07/13/GoogleCTF2022-Cycling/"/>
    <id>http://kunram.github.io/2022/07/13/GoogleCTF2022-Cycling/</id>
    <published>2022-07-13T12:32:19.000Z</published>
    <updated>2022-07-13T18:27:17.316Z</updated>
    
    <content type="html"><![CDATA[<p>This problem gives us a file:chall.py.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copyright 2022 Google LLC</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">It is well known that any RSA encryption can be undone by just encrypting the</span></span><br><span class="line"><span class="string">ciphertext over and over again. If the RSA modulus has been chosen badly then</span></span><br><span class="line"><span class="string">the number of encryptions necessary to undo an encryption is small.</span></span><br><span class="line"><span class="string">If n = 0x112b00148621 then only 209 encryptions are necessary as the following</span></span><br><span class="line"><span class="string">example demonstrates:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>e = 65537</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>n = 0x112b00148621</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>pt = 0xdeadbeef</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span># Encryption</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>ct = pow(pt, e, n)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span># Decryption via cycling:</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>pt = ct</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>for _ in range(209):</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>  pt = pow(pt, e, n)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span># Assert decryption worked:</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>assert ct == pow(pt, e, n)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">However, if the modulus is well chosen then a cycle attack can take much longer.</span></span><br><span class="line"><span class="string">This property can be used for a timed release of a message. We have confirmed</span></span><br><span class="line"><span class="string">that it takes a whopping 2^1025-3 encryptions to decrypt the flag. Pack out</span></span><br><span class="line"><span class="string">your quantum computer and perform 2^1025-3 encryptions to solve this</span></span><br><span class="line"><span class="string">challenge. Good luck doing this in 48h.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">0x99efa9177387907eb3f74dc09a4d7a93abf6ceb7ee102c689ecd0998975cede29f3ca951feb5adfb9282879cc666e22dcafc07d7f89d762b9ad5532042c79060cdb022703d790421a7f6a76a50cceb635ad1b5d78510adf8c6ff9645a1b179e965358e10fe3dd5f82744773360270b6fa62d972d196a810e152f1285e0b8b26f5d54991d0539a13e655d752bd71963f822affc7a03e946cea2c4ef65bf94706f20b79d672e64e8faac45172c4130bfeca9bef71ed8c0c9e2aa0a1d6d47239960f90ef25b337255bac9c452cb019a44115b0437726a9adef10a028f1e1263c97c14a1d7cd58a8994832e764ffbfcc05ec8ed3269bb0569278eea0550548b552b1</span></span><br><span class="line">ct = <span class="number">0x339be515121dab503106cd190897382149e032a76a1ca0eec74f2c8c74560b00dffc0ad65ee4df4f47b2c9810d93e8579517692268c821c6724946438a9744a2a95510d529f0e0195a2660abd057d3f6a59df3a1c9a116f76d53900e2a715dfe5525228e832c02fd07b8dac0d488cca269e0dbb74047cf7a5e64a06a443f7d580ee28c5d41d5ede3604825eba31985e96575df2bcc2fefd0c77f2033c04008be9746a0935338434c16d5a68d1338eabdcf0170ac19a27ec832bf0a353934570abd48b1fe31bc9a4bb99428d1fbab726b284aec27522efb9527ddce1106ba6a480c65f9332c5b2a3c727a2cca6d6951b09c7c28ed0474fdc6a945076524877680</span></span><br><span class="line"><span class="comment"># Decryption via cycling:</span></span><br><span class="line">pt = ct</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span>**<span class="number">1025</span> - <span class="number">3</span>):</span><br><span class="line">  pt = pow(pt, e, n)</span><br><span class="line"><span class="comment"># Assert decryption worked:</span></span><br><span class="line"><span class="keyword">assert</span> ct == pow(pt, e, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print flag:</span></span><br><span class="line">print(pt.to_bytes((pt.bit_length() + <span class="number">7</span>)//<span class="number">8</span>, <span class="string">'big'</span>).decode())</span><br></pre></td></tr></table></figure><p>As the chall shows, we could get the flag via successfully running the code above lmaoo.</p><p>This problem equals to the formula:<br>$$<br>m=c^{e^{2^{1025}-3}}\enspace mod \enspace n<br>$$<br>which equals to:<br>$$<br>m=m^{e^{2^{1025}-2}}\enspace mod \enspace n<br>$$<br>This makes my sense of Carmichael function,as there exists $\lambda(n)$,that is:<br>$$<br>a^{\lambda (n)}\equiv 1 \enspace mod \enspace n<br>$$<br>So,<br>$$<br>e^{2^{1025}-2}\equiv 1 \enspace mod \enspace \lambda(n)<br>$$<br>We’re able to know that $\lambda(\lambda(n))=e^{2^{1025}-2}$.</p><p>Think about Carmichael theorem, using </p><p>to factorize $2^{1025}-2$.</p><p>Make combinations of all the prime factors, the total times are $2^{17}$.</p><p>I also use a method like Pollard p-1 algorithm to get the flag faster.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">0x99efa9177387907eb3f74dc09a4d7a93abf6ceb7ee102c689ecd0998975cede29f3ca951feb5adfb9282879cc666e22dcafc07d7f89d762b9ad5532042c79060cdb022703d790421a7f6a76a50cceb635ad1b5d78510adf8c6ff9645a1b179e965358e10fe3dd5f82744773360270b6fa62d972d196a810e152f1285e0b8b26f5d54991d0539a13e655d752bd71963f822affc7a03e946cea2c4ef65bf94706f20b79d672e64e8faac45172c4130bfeca9bef71ed8c0c9e2aa0a1d6d47239960f90ef25b337255bac9c452cb019a44115b0437726a9adef10a028f1e1263c97c14a1d7cd58a8994832e764ffbfcc05ec8ed3269bb0569278eea0550548b552b1</span></span><br><span class="line">ct = <span class="number">0x339be515121dab503106cd190897382149e032a76a1ca0eec74f2c8c74560b00dffc0ad65ee4df4f47b2c9810d93e8579517692268c821c6724946438a9744a2a95510d529f0e0195a2660abd057d3f6a59df3a1c9a116f76d53900e2a715dfe5525228e832c02fd07b8dac0d488cca269e0dbb74047cf7a5e64a06a443f7d580ee28c5d41d5ede3604825eba31985e96575df2bcc2fefd0c77f2033c04008be9746a0935338434c16d5a68d1338eabdcf0170ac19a27ec832bf0a353934570abd48b1fe31bc9a4bb99428d1fbab726b284aec27522efb9527ddce1106ba6a480c65f9332c5b2a3c727a2cca6d6951b09c7c28ed0474fdc6a945076524877680</span></span><br><span class="line"></span><br><span class="line">factors = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">257</span>,<span class="number">641</span>,<span class="number">65537</span>,<span class="number">274177</span>,<span class="number">2424833</span>,<span class="number">6700417</span>,<span class="number">67280421310721</span>,<span class="number">1238926361552897</span>,<span class="number">59649589127497217</span>,<span class="number">5704689200685129054721</span>,<span class="number">7455602825647884208337395736200454918783366342657</span>,<span class="number">93461639715357977769163558199606896584051237541638188580280321</span>,<span class="number">741640062627530801524787141901937474059940781097519023905821316144415759504705008092818711693940737</span>]</span><br><span class="line"></span><br><span class="line">res=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(factors)):</span><br><span class="line">    <span class="keyword">for</span> comb <span class="keyword">in</span> combinations(factors, i):</span><br><span class="line">        pp = prod(comb)</span><br><span class="line">        <span class="keyword">if</span> isPrime(pp + <span class="number">1</span>):</span><br><span class="line">            res = powmod(res, pp + <span class="number">1</span>, n)</span><br><span class="line">            g = gcd(res - <span class="number">1</span>, n)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">1</span> &lt; g &lt; n:</span><br><span class="line">                p = g</span><br><span class="line">                q = n // p</span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">pt = powmod(ct, d, n)</span><br><span class="line">print(int(pt).to_bytes((int(pt).bit_length() + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">"big"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This problem gives us a file:chall.py.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    
    <category term="-Crypto -CTF" scheme="http://kunram.github.io/tags/Crypto-CTF/"/>
    
  </entry>
  
  <entry>
    <title>Welcome!</title>
    <link href="http://kunram.github.io/2019/08/03/Welcome/"/>
    <id>http://kunram.github.io/2019/08/03/Welcome/</id>
    <published>2019-08-03T03:07:00.000Z</published>
    <updated>2022-07-12T11:12:16.231Z</updated>
    
    <content type="html"><![CDATA[<p>A rookie of Cryptography and CTF competitions.</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;A rookie of Cryptography and CTF competitions.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Welcome" scheme="http://kunram.github.io/tags/Welcome/"/>
    
  </entry>
  
</feed>
